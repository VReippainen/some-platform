// Prisma schema for social-platform API
// Datasource and generator

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

generator client {
  provider = "prisma-client-js"
}

// User model
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  profiles    Profile[]
}

model Profile {
  id            String    @id @default(uuid())
  userId        String
  username      String    @unique
  bio           String?
  gender        Gender
  genderOther   String?   @map("gender_other")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")
  user          User      @relation(fields: [userId], references: [id])
  posts         Post[]
  profileImage  Image?    @relation("ProfileImage", fields: [profileImageId], references: [id])
  profileImageId String?  @unique @map("profile_image_id")
  albums        Album[]
}

enum Gender {
  male
  female
  other
}

model Post {
  id            String    @id @default(uuid())
  profileId     String
  content       String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")
  profile       Profile   @relation(fields: [profileId], references: [id])
  images        Image[]
}

model Image {
  id            String    @id @default(uuid())
  blobUrl       String    @map("blob_url")
  blobName      String    @map("blob_name")
  contentType   String    @map("content_type")
  size          Int
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")
  profile       Profile?  @relation("ProfileImage")
  profileId     String?   @map("profile_id")
  post          Post?     @relation(fields: [postId], references: [id])
  postId        String?   @map("post_id")
  album         Album?    @relation(fields: [albumId], references: [id])
  albumId       String?   @map("album_id")
}

model Album {
  id            String    @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")
  profile       Profile   @relation(fields: [profileId], references: [id])
  profileId     String    @map("profile_id")
  images        Image[]
}